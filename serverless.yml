# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: crypto-ixian
app: crypto-ixian-bot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, env:STAGE, "dev"}
  region: ca-central-1
  environment:
    KUCOIN_URL_ALLTICKERS: https://api.kucoin.com/api/v1/market/allTickers
    SANTIMENT_KEY: ${env:SANTIMENT_KEY}
    TABLE_DISCOVERY: ${self:custom.tableDiscovery}
    TABLE_HARVEST: ${self:custom.tableHarvest}
    TABLE_STRATEGY: ${self:custom.tableHarvest}
    QUEUE_HARVEST: ${self:custom.queueHarvest}
    QUEUE_STRATEGY: ${self:custom.queueTrade}
    SNS_TOPIC_DISCOVERY: ${self:custom.snsTopicDiscovery}
    SES_SENDER: ${self:custom.sesSender}
    SES_RECIPIENT: ${self:custom.sesRecipient}
    STRATEGY_DAA_ENTER : ${self:custom.strategyDAAEnter}
    STRATEGY_DAA_EXIT : ${self:custom.strategyDAAExit}
    STRATEGY_SMA_LOOKBACK : ${self:custom.strategySMALookback}
    STRATEGY_VOLATILITY_ENTER : ${self:custom.strategyVolatilityEnter}
    STRATEGY_VOLATILITY_EXIT : ${self:custom.strategyVolatilityExit}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:DeleteMessageBatch
        - sqs:GetQueueUrl
        - sqs:ChangeMessageVisibility
        - sqs:ChangeMessageVisibilityBatch
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
    - Effect: Allow
      Action: "ses:*"
      Resource: "*"

custom:
  tableDiscovery: discovery-${opt:stage, env:STAGE, "dev"}
  tableHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  tableStrategy: strategy-${opt:stage, env:STAGE, "dev"}
  queueHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  queueStrategy: strategy-${opt:stage, env:STAGE, "dev"}
  sesSender: crypto.mastheader@gmail.com
  sesRecipient: crypto.mastheader@gmail.com
  snsTopicDiscovery: discovery-${opt:stage, env:STAGE, "dev"}
  snsTopicHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  strategyDAAEnter: 0.2
  strategyDAAExit: -0.4
  strategySMALookback: 13
  strategyVolatilityEnter: 1.2
  strategyVolatilityExit: 1.5
  logRetentionInDays: 7
  capacities:
    - table: TableHarvest
      read:
        minimum: 1
        maximum: 100
        usage: 0.75
      write:
        minimum: 2
        maximum: 10000
        usage: 0.75
    - table: TableTrade
      read:
        minimum: 1
        maximum: 100
        usage: 0.75
      write:
        minimum: 2
        maximum: 10000
        usage: 0.75
plugins:
  - serverless-python-requirements
  - serverless-plugin-log-retention
  - serverless-dynamodb-autoscaling

functions:
  discovery:
    handler: cmd/discovery/handler.discovery
    timeout: 120
    events:
      - schedule: cron(0 0 * * ? *) # 00:00 UTC (Midnight) every day
  discoveryNotify:
    handler: cmd/discovery/handler.notify
    events:
      - sns: ${self:custom.snsTopicDiscovery}
  harvestPrimer:
    handler: cmd/harvest/primer.primer
    events:
      - schedule: cron(1 0 * * ? *) # 01:00 UTC  (Midnight + 1 min) every day
  harvestExecutor:
    handler: cmd/harvest/executor.executor
    timeout: 120
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueHarvest
              - Arn
          batchSize: 1
    strategy:
      handler: cmd/strategy/strategy.strategy
      events:
        - sqs:
            arn:
              Fn::GetAtt:
                - QueueTrade
                - Arn
            batchSize: 1
resources:
  Resources:
    TableDiscovery:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableDiscovery}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableHarvest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableHarvest}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: datetime_metric
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
          - AttributeName: datetime_metric
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableStrategy:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableStrategy}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: datetime_proposed
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
          - AttributeName: datetime_proposed
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    QueueHarvest:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueHarvest}
    QueueStrategy:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueStrategy}
