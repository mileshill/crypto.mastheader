# crypto-ixian
# Crypto Ixian is a serverless trading bot that leverages on-chain analytics from the
# Santiment API and trading pairs from KuCoin. The bot executes the following responsibilites:
# 1. Discovery of new pairs each week
# 2. Harvesting data from Santiment for each of the trading pairs on a regular interval
# 3. Trading strategy implementation to determine if trades should be open or closes (all trades are BUY side)
# 4. Account interacts with KuCoin to determine when trades can be made, and placing orders
service: crypto-ixian
app: crypto-ixian-bot

frameworkVersion: '2'

package:
  patterns:
    - "!node_modules/**"
    - "!.git/**"
    - "!scripts/**"

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: python3.9
  stage: ${opt:stage, env:STAGE, "dev"}
  region: ca-central-1  # Kucoin friendly region for API access
  environment:
    ENV: ${opt:stage, env:STAGE, "dev"}
    KUCOIN_URL_ALLTICKERS: https://api.kucoin.com/api/v1/market/allTickers  # Pairs for discovery
    SANTIMENT_KEY: ${env:SANTIMENT_KEY}
    TABLE_DISCOVERY: ${self:custom.tableDiscovery}
    TABLE_HARVEST: ${self:custom.tableHarvest}
    #TABLE_STRATEGY_META: ${self:custom.tableStrategyMeta}
    TABLE_STRATEGY_DETAILS: ${self:custom.tableStrategyDetails}
    #TABLE_TRADE_META: ${self:custom.tableTradeMeta}
    #TABLE_TRADE_DETAILS: ${self:custom.tableTradeDetails}
    TABLE_ACCOUNT: ${self:custom.tableAccount}
    TABLE_ACCOUNT_LOG: ${self:custom.tableAccountLog}
    TABLE_ACCOUNT_POSITION_LOG: ${self:custom.tableAccountPositionLog}
    TABLE_ORDERS: ${self:custom.tableOrders}
    QUEUE_HARVEST: ${self:custom.queueHarvest}
    QUEUE_STRATEGY: ${self:custom.queueStrategy}
    #QUEUE_TRADE: ${self:custom.queueTrade}
    QUEUE_TRADE_BUY: ${self:custom.queueTradeBuy}
    QUEUE_TRADE_SELL: ${self:custom.queueTradeSell}
    QUEUE_MONITOR: ${self:custom.queueMonitor}
    SNS_TOPIC_DISCOVERY: ${self:custom.snsTopicDiscovery}
    SNS_TOPIC_STRATEGY: ${self:custom.snsTopicStrategy}
    SES_SENDER: ${self:custom.sesSender}
    SES_RECIPIENT: ${self:custom.sesRecipient}
    STRATEGY_DAA_ENTER_LOWER : ${self:custom.strategyDAAEnterLower}
    STRATEGY_DAA_ENTER_UPPER : ${self:custom.strategyDAAEnterUpper}
    STRATEGY_DAA_EXIT : ${self:custom.strategyDAAExit}
    STRATEGY_SMA_LOOKBACK : ${self:custom.strategySMALookback}
    STRATEGY_VOLATILITY_ENTER_LOWER : ${self:custom.strategyVolatilityEnterLower}
    STRATEGY_VOLATILITY_ENTER_UPPER : ${self:custom.strategyVolatilityEnterUpper}
    STRATEGY_VOLATILITY_EXIT : ${self:custom.strategyVolatilityExit}
    STRATEGY_MAX_TRADES: ${self:custom.strategyMaxTrades}
    KUCOIN_KEY : ${self:custom.kucoinKey}
    KUCOIN_SECRET: ${self:custom.kucoinSecret}
    KUCOIN_API_PASSPHRASE: ${self:custom.kucoinApiPassphrase}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:DeleteMessageBatch
        - sqs:GetQueueUrl
        - sqs:ChangeMessageVisibility
        - sqs:ChangeMessageVisibilityBatch
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
    - Effect: Allow
      Action: "ses:*"
      Resource: "*"
    - Effect: Allow
      Action: kms:Decrypt
      Resource: "*"

custom:
  tableDiscovery: discovery-${opt:stage, env:STAGE, "dev"}
  tableHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  #tableStrategyMeta: strategyMeta-${opt:stage, env:STAGE, "dev"}
  tableStrategyDetails: strategyDetails-${opt:stage, env:STAGE, "dev"}
  #tableTradeMeta: tradeMeta-${opt:stage, env:STAGE, "dev"}
  #tableTradeDetails: tradeDetails-${opt:stage, env:STAGE, "dev"}
  tableAccount: account-${opt:stage, env:STAGE, "dev"}
  tableAccountLog: accountLog-${opt:stage, env:STAGE, "dev"}
  tableAccountPositionLog: accountPositionLog-${opt:stage, env:STAGE, "dev"}
  tableOrders: orders-${opt:stage, env:STAGE, "dev"}
  queueHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  queueStrategy: strategy-${opt:stage, env:STAGE, "dev"}
  #queueTrade: trade-${opt:stage, env:STAGE, "dev"}
  queueTradeBuy: tradeBuy-${opt:stage, env:STAGE, "dev"}
  queueTradeSell: tradeSell-${opt:stage, env:STAGE, "dev"}
  queueMonitor: monitor-${opt:stage, env:STAGE, "dev"}
  sesSender: crypto.mastheader@gmail.com
  sesRecipient: crypto.mastheader@gmail.com
  snsTopicDiscovery: discovery-${opt:stage, env:STAGE, "dev"}
  snsTopicStrategy: strategy-${opt:stage, env:STAGE, "dev"}
  snsTopicHarvest: harvest-${opt:stage, env:STAGE, "dev"}
  timeoutHarvest: 300
  timeoutStrategy: 120
  strategyDAAEnterLower: -0.02
  strategyDAAEnterUpper: 0.5
  strategyDAAExit: -0.46
  strategySMALookback: 2
  strategyMaxTrades: 7
  strategyVolatilityEnterLower: 0.099
  strategyVolatilityEnterUpper: 1.25
  strategyVolatilityExit: 1.7
  kucoinKey: ${env:KUCOIN_KEY}
  kucoinSecret: ${env:KUCOIN_SECRET}
  kucoinApiPassphrase: ${env:KUCOIN_API_PASSPHRASE}
  logRetentionInDays: 7  # Logs expire once they reach N days. Prevents excessive CloudWatch storage
  # Pruning manages the number of Lambda versions that are maintained. Storage cost reduction.
  prune:
    automatic: true
    number: 2
  pythonRequirements:
    #slim: true
    useStaticCache: false
    useDownloadCache: false
    #layer: true
  # Capacity configures the autoscaling features of Dynamo
  capacities:
    - table: TableHarvest
      read:
        minimum: 1
        maximum: 500
        usage: 0.75
      write:
        minimum: 1
        maximum: 10000
        usage: 0.75
    - table: TableOrders
      read:
        minimum: 1
        maximum: 500
        usage: 0.75
      write:
        minimum: 1
        maximum: 10000
        usage: 0.75
    - table: TableStrategyDetails
      read:
        minimum: 1
        maximum: 100
        usage: 0.75
      write:
        minimum: 1
        maximum: 10000
        usage: 0.75
#    - table: TableStrategyMeta
#      read:
#        minimum: 1
#        maximum: 100
#        usage: 0.75
#      write:
#        minimum: 1
#        maximum: 10000
#        usage: 0.75
plugins:
  - serverless-python-requirements
  - serverless-plugin-log-retention
  - serverless-dynamodb-autoscaling
  - serverless-prune-plugin

functions:
  # Discovery looks for new tokens in the intersection of Santiment and Kucoin paris
  discovery:
    handler: cmd/discovery/handler.discovery
    timeout: ${self:custom.timeoutHarvest}
    events:
      - schedule: cron(0 0 ? * SUN *) # Sundays at 00:00 UTC
  # Discovery notify sends an email with the number of pairs and pair symbols that were detected
  discoveryNotify:
    handler: cmd/discovery/handler.notify
    events:
      - sns: ${self:custom.snsTopicDiscovery}
  # Harvest Primer sweeps the Discovery table and queues up the pairs for the data harvest
  harvestPrimer:
    handler: cmd/harvest/primer.primer
    events:
      - schedule: cron(0 0/4 ? * * *) # 01:00 UTC  (Midnight + 1 min) every day
  # Harvest Executor queries Santiment to get the latest metrics on each of the trading pairs
  harvestExecutor:
    handler: cmd/harvest/executor.executor
    timeout: ${self:custom.timeoutHarvest}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueHarvest
              - Arn
          batchSize: 1
  # Strategy applies the conditions to determine if a trade should be open or closed
  strategy:
    handler: cmd/strategy/strategy.strategy
    timeout: ${self:custom.timeoutStrategy}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueStrategy
              - Arn
          batchSize: 1
#  trade:
#    handler: cmd/trade/trade.trade
#    events:
#      - sqs:
#          arn:
#            Fn::GetAtt:
#              - QueueTrade
#              - Arn
#          batchSize: 10
  tradeBuy:
    handler: cmd/trade/trade_buy.trade_buy
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueTradeBuy
              - Arn
          batchSize: 10
  tradeSell:
    handler: cmd/trade/trade_sell.trade_sell
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueTradeSell
              - Arn
          batchSize: 10
  monitor:
    handler: cmd/monitor/monitor.monitor
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueMonitor
              - Arn
          batchSize: 1
  accountLog:
    handler: cmd/account_log/account_log.account_log
    timeout: 300
    events:
      - schedule: cron(0 0/1 ? * * *) # Every 2nd hour plus 1 minute
resources:
  Resources:
    TableDiscovery:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableDiscovery}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableHarvest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableHarvest}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: datetime_metric
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
          - AttributeName: datetime_metric
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#    TableStrategyMeta:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:custom.tableStrategyMeta}
#        AttributeDefinitions:
#          - AttributeName: slug
#            AttributeType: S
#        KeySchema:
#          - AttributeName: slug
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
    TableStrategyDetails:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableStrategyDetails}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: guid_details
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
          - AttributeName: guid_details
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#    TableTradeMeta:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:custom.tableTradeMeta}
#        AttributeDefinitions:
#          - AttributeName: slug
#            AttributeType: S
#        KeySchema:
#          - AttributeName: slug
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#    TableTradeDetails:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:custom.tableTradeDetails}
#        AttributeDefinitions:
#          - AttributeName: slug
#            AttributeType: S
#          - AttributeName: guid_details
#            AttributeType: S
#        KeySchema:
#          - AttributeName: slug
#            KeyType: HASH
#          - AttributeName: guid_details
#            KeyType: RANGE
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
    TableAccount:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableAccount}
        AttributeDefinitions:
          - AttributeName: account_name
            AttributeType: S
        KeySchema:
          - AttributeName: account_name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableAccountLog:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableAccountLog}
        AttributeDefinitions:
          - AttributeName: account_name
            AttributeType: S
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: account_name
            KeyType: HASH
          - AttributeName: datetime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableAccountPositionLog:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableAccountPositionLog}
        AttributeDefinitions:
          - AttributeName: currency
            AttributeType: S
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: currency
            KeyType: HASH
          - AttributeName: datetime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TableOrders:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableOrders}
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    QueueHarvest:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueHarvest}
        VisibilityTimeout: 300
    QueueStrategy:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueStrategy}
        VisibilityTimeout: 240
#    QueueTrade:
#      Type: AWS::SQS::Queue
#      Properties:
#        QueueName: ${self:custom.queueTrade}
#        VisibilityTimeout: 240
    QueueTradeBuy:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueTradeBuy}
        VisibilityTimeout: 240
    QueueTradeSell:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueTradeSell}
        VisibilityTimeout: 240
    QueueMonitor:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueMonitor}
        VisibilityTimeout: 900
